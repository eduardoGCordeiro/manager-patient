{"ast":null,"code":"import { ADD_CHANGES, ADD_ERRORS, CLEAR_DATA, PENDING_REQUEST, EDIT_DATA, SEND_DATA_SUCCESS, SEND_DATA_ERROR, CONFIRM_ALERT } from '../actions/actionsType';\nimport * as ValidationsForm from '../../validations/patientForm';\nexport function clearData() {\n  return {\n    type: CLEAR_DATA\n  };\n}\n;\nexport function pendingRequest(pending_request) {\n  return {\n    type: PENDING_REQUEST,\n    pending_request: pending_request\n  };\n}\n;\nexport function editData(data) {\n  return {\n    type: EDIT_DATA,\n    data: data\n  };\n}\n;\nexport function confirmAlert(field, value) {\n  return {\n    type: CONFIRM_ALERT,\n    field: field,\n    value: value\n  };\n}\n;\nexport function validateForm(data) {\n  return (dispatch, getState) => {\n    dispatch(addErrors(ValidationsForm.validateName(data.name)));\n    dispatch(addErrors(ValidationsForm.validateLastName(data.last_name)));\n    dispatch(addErrors(ValidationsForm.validateAgeOfBirth(data.age_of_birth)));\n    dispatch(addErrors(ValidationsForm.validatePhone(data.phone)));\n    dispatch(addErrors(ValidationsForm.validateEmail(data.email)));\n    dispatch(addErrors(ValidationsForm.validateCpf(data.cpf)));\n    dispatch(addErrors(ValidationsForm.validateIdenty(data.identy)));\n    dispatch(addErrors(ValidationsForm.validateZipCode(data.zip_code)));\n    dispatch(addErrors(ValidationsForm.validateState(data.state)));\n    dispatch(addErrors(ValidationsForm.validateCity(data.city)));\n    dispatch(addErrors(ValidationsForm.validateAddress(data.address)));\n    dispatch(addErrors(ValidationsForm.validateAddressNumber(data.address_number)));\n    dispatch(checkErrors(getState()));\n  };\n}\n;\nexport function checkErrors(data) {\n  return (dispatch, getState) => {\n    let invalid_fields = false;\n\n    for (let value of Object.values(data.patientForm.errors)) {\n      if (value === true) {\n        invalid_fields = true;\n      }\n    }\n\n    if (!invalid_fields) {\n      dispatch(verifyPatientExist(getState()));\n    }\n  };\n}\n;\nexport function patientNotExist() {\n  return (dispatch, getState) => {\n    dispatch(sendData(getState()));\n  };\n}\n;\nexport function sendData(data) {\n  return dispatch => {\n    if (data.patientForm.patient_id === '') {\n      dispatch(fetchSaveData(data));\n    } else {\n      dispatch(fetchEditData(data));\n    }\n  };\n}\n;\nexport function sendDataSuccess() {\n  return {\n    type: SEND_DATA_SUCCESS\n  };\n}\n;\nexport function sendDataError() {\n  return {\n    type: SEND_DATA_ERROR\n  };\n}\n;\nexport function addChanges(name_field, value_field) {\n  return {\n    type: ADD_CHANGES,\n    field: name_field,\n    value: value_field\n  };\n}\n;\nexport function addErrors(data) {\n  return {\n    type: ADD_ERRORS,\n    field_error: data.field,\n    field_error_msg: data.field + '_msg',\n    value_error: data.error,\n    value_error_msg: data.msg_error\n  };\n}\n;\nexport function fetchSaveData(data) {\n  return dispatch => {\n    fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager', {\n      method: 'POST',\n      headers: {\n        'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data.patientForm.patient_form_edit)\n    }).then(response => response.json()).then(response => {\n      if (response.errorType || response.statusCode === 500) {\n        throw response;\n      }\n\n      dispatch(sendDataSuccess());\n    }).catch(error => {\n      dispatch(sendDataError());\n    });\n  };\n}\n;\nexport function fetchEditData(data) {\n  return dispatch => {\n    fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager/' + data.patientForm.patient_id, {\n      method: 'PUT',\n      headers: {\n        'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data.patientForm.patient_form_edit)\n    }).then(response => response.json()).then(response => {\n      if (response.errorType || response.statusCode === 500) {\n        throw response;\n      }\n\n      dispatch(sendDataSuccess());\n    }).catch(error => {\n      dispatch(sendDataError());\n    });\n  };\n}\n;\nexport function verifyPatientExist(data) {\n  return dispatch => {\n    dispatch(pendingRequest(true));\n    fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager/' + data.patientForm.patient_form_edit.cpf, {\n      method: 'GET',\n      headers: {\n        'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.errorType || response.statusCode === 500) {\n        throw response;\n      } else {\n        if (response.patient.length === 0) {\n          dispatch(patientNotExist());\n        } else {\n          if (response.patient.length === 1) {\n            if (data.patientForm.patient_id !== '' && response.patient[0].id === data.patientForm.patient_id) {\n              dispatch(patientNotExist());\n            } else {\n              dispatch(addErrors({\n                field: 'cpf_error',\n                error: true,\n                msg_error: 'Paciente já cadastrado, por favor verifique o cpf.'\n              }));\n              dispatch(pendingRequest(false));\n            }\n          } else {\n            dispatch(addErrors({\n              field: 'cpf_error',\n              error: true,\n              msg_error: 'Paciente já cadastrado, por favor verifique o cpf.'\n            }));\n            dispatch(pendingRequest(false));\n          }\n        }\n      }\n    }).catch(error => {\n      dispatch(sendDataError());\n    });\n  };\n}\n;","map":{"version":3,"sources":["/home/eduardo/Documents/projetos/manager-patients/client/src/store/actions/patientForm.js"],"names":["ADD_CHANGES","ADD_ERRORS","CLEAR_DATA","PENDING_REQUEST","EDIT_DATA","SEND_DATA_SUCCESS","SEND_DATA_ERROR","CONFIRM_ALERT","ValidationsForm","clearData","type","pendingRequest","pending_request","editData","data","confirmAlert","field","value","validateForm","dispatch","getState","addErrors","validateName","name","validateLastName","last_name","validateAgeOfBirth","age_of_birth","validatePhone","phone","validateEmail","email","validateCpf","cpf","validateIdenty","identy","validateZipCode","zip_code","validateState","state","validateCity","city","validateAddress","address","validateAddressNumber","address_number","checkErrors","invalid_fields","Object","values","patientForm","errors","verifyPatientExist","patientNotExist","sendData","patient_id","fetchSaveData","fetchEditData","sendDataSuccess","sendDataError","addChanges","name_field","value_field","field_error","field_error_msg","value_error","error","value_error_msg","msg_error","fetch","method","headers","body","JSON","stringify","patient_form_edit","then","response","json","errorType","statusCode","catch","patient","length","id"],"mappings":"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","sourcesContent":["import {\n  ADD_CHANGES, \n  ADD_ERRORS, \n  CLEAR_DATA, \n  PENDING_REQUEST,\n  EDIT_DATA, \n  SEND_DATA_SUCCESS,\n  SEND_DATA_ERROR,\n  CONFIRM_ALERT\n} from '../actions/actionsType';\n\nimport * as ValidationsForm from '../../validations/patientForm';\n\nexport function clearData(){\n  return {\n    type: CLEAR_DATA\n  }\n};\n\n\nexport function pendingRequest(pending_request){\n  return {\n    type: PENDING_REQUEST,\n    pending_request: pending_request \n  }\n};\n\n\nexport function editData(data){\n  return {\n    type: EDIT_DATA,\n    data: data\n  }\n};\n\n\nexport function confirmAlert(field, value){\n  return {\n    type: CONFIRM_ALERT,\n    field: field,\n    value: value\n  }\n};\n\n\nexport function validateForm(data){\n  return (dispatch, getState) => {\n    dispatch(addErrors(ValidationsForm.validateName(data.name)));\n    dispatch(addErrors(ValidationsForm.validateLastName(data.last_name)));\n    dispatch(addErrors(ValidationsForm.validateAgeOfBirth(data.age_of_birth))); \n    dispatch(addErrors(ValidationsForm.validatePhone(data.phone)));\n    dispatch(addErrors(ValidationsForm.validateEmail(data.email)));\n    dispatch(addErrors(ValidationsForm.validateCpf(data.cpf)));\n    dispatch(addErrors(ValidationsForm.validateIdenty(data.identy)));\n    dispatch(addErrors(ValidationsForm.validateZipCode(data.zip_code)));\n    dispatch(addErrors(ValidationsForm.validateState(data.state)));\n    dispatch(addErrors(ValidationsForm.validateCity(data.city)));\n    dispatch(addErrors(ValidationsForm.validateAddress(data.address)));\n    dispatch(addErrors(ValidationsForm.validateAddressNumber(data.address_number)));\n\n    dispatch(checkErrors(getState()));\n  }\n};\n\n\nexport function checkErrors(data){\n  return (dispatch, getState) => {\n    \n    let invalid_fields = false;\n\n    for(let value of Object.values(data.patientForm.errors)){\n      if(value === true){\n        invalid_fields = true;\n      }\n    }\n\n    if(!invalid_fields){\n      dispatch(verifyPatientExist(getState()));\n    }\n  }\n};\n\n\nexport function patientNotExist(){\n  return (dispatch, getState) => {\n      dispatch(sendData(getState()));\n  }\n};\n\n\nexport function sendData(data){\n  return dispatch => {\n    if(data.patientForm.patient_id === ''){\n      dispatch(fetchSaveData(data));\n    }else {\n      dispatch(fetchEditData(data));\n    }\n  }\n};\n\n\nexport function sendDataSuccess(){\n  return {\n    type: SEND_DATA_SUCCESS\n  };\n};\n\n\nexport function sendDataError(){\n  return {\n    type: SEND_DATA_ERROR\n  };\n};\n\n\nexport function addChanges(name_field, value_field){\n  return {\n    type: ADD_CHANGES,\n    field: name_field,\n    value: value_field,\n  };\n};\n\n\nexport function addErrors(data){\n  return {\n    type: ADD_ERRORS,\n    field_error: data.field,\n    field_error_msg: data.field + '_msg',\n    value_error: data.error,\n    value_error_msg: data.msg_error\n  };\n};\n\n\nexport function fetchSaveData(data) {\n  return dispatch => {\n      fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager', {\n          method: 'POST',     \n          headers: {\n              'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data.patientForm.patient_form_edit)\n      }).then(response => response.json())\n        .then(response => {\n          if( response.errorType || response.statusCode === 500){\n              throw (response);\n          }\n          dispatch(sendDataSuccess());\n        })\n        .catch(error => {\n          dispatch(sendDataError());\n        })\n  }\n};\n\n\nexport function fetchEditData(data) {\n  return dispatch => {\n      fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager/' + data.patientForm.patient_id, {\n          method: 'PUT',     \n          headers: {\n              'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data.patientForm.patient_form_edit)\n      }).then(response => response.json())\n        .then(response => {\n          if( response.errorType || response.statusCode === 500){\n              throw (response);\n          }\n          dispatch(sendDataSuccess());\n        })\n        .catch(error => {\n          dispatch(sendDataError());\n        })\n  }\n};\n\n\nexport function verifyPatientExist(data) {\n  return dispatch => {\n      \n      dispatch(pendingRequest(true));\n\n      fetch('https://ybht24vw4a.execute-api.us-east-2.amazonaws.com/Patient-Manager/patient-manager/' + data.patientForm.patient_form_edit.cpf, {\n          method: 'GET',     \n          headers: {\n              'x-api-key': 'jsxcKzoEKCag5Ix4dt88F46ZOizynbtN8LHoAJjH',\n              'Content-Type': 'application/json'\n          }\n      }).then(response => response.json())\n        .then(response => {\n          if( response.errorType || response.statusCode === 500 ){\n              throw (response);\n          }else {\n            if(response.patient.length === 0){\n              dispatch(patientNotExist());\n            }else {\n              if(response.patient.length === 1){\n                if( data.patientForm.patient_id !== '' && response.patient[0].id === data.patientForm.patient_id){\n                  dispatch(patientNotExist());      \n                }else {\n                  dispatch(addErrors({field: 'cpf_error', error: true, msg_error: 'Paciente já cadastrado, por favor verifique o cpf.'}));    \n                  dispatch(pendingRequest(false));\n                }\n              }else {\n                dispatch(addErrors({field: 'cpf_error', error: true, msg_error: 'Paciente já cadastrado, por favor verifique o cpf.'}));    \n                dispatch(pendingRequest(false));\n              }\n            }\n          }\n        })\n        .catch(error => {\n          dispatch(sendDataError());\n        })\n  }\n};"]},"metadata":{},"sourceType":"module"}