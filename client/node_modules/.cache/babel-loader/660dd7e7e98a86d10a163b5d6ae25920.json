{"ast":null,"code":"import { CURRENT_DATE } from '../constants/index';\nexport function validateName(value) {\n  if (value === '') {\n    return {\n      field: 'name_error',\n      error: true,\n      msg_error: 'Por favor, insira o nome'\n    };\n  } else {\n    return {\n      field: 'name_error',\n      error: false,\n      msg_error: ''\n    };\n  }\n}\n;\nexport function validateLastName(value) {\n  if (value === '') {\n    return {\n      field: 'last_name_error',\n      error: true,\n      msg_error: 'Por favor, insira o sobrenome do paciente.'\n    };\n  } else {\n    return {\n      field: 'last_name_error',\n      error: false,\n      msg_error: ''\n    };\n  }\n}\n;\nexport function validateAgeOfBirth(value) {\n  if (value === '') {\n    return {\n      field: 'age_of_birth_error',\n      error: true,\n      msg_error: 'Por favor, insira a data de nascimento.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'phone_error',\n        error: true,\n        msg_error: 'Por favor, insira uma data válida.'\n      };\n    } else {\n      let age_of_birth = new Date(value);\n\n      if (age_of_birth > CURRENT_DATE) {\n        return {\n          field: 'phone_error',\n          error: true,\n          msg_error: 'Por favor, menor que a data atual.'\n        };\n      } else {\n        return {\n          field: 'age_of_birth_error',\n          error: false,\n          msg_error: ''\n        };\n      }\n    }\n  }\n}\n;\nexport function validateEmail(value) {\n  let regex_validation_email = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (value !== '') {\n    if (regex_validation_email.test(value)) {\n      return {\n        field: 'email_error',\n        error: false,\n        msg_error: ''\n      };\n    } else {\n      return {\n        field: 'email_error',\n        error: true,\n        msg_error: 'Por favor, insira um email válido.'\n      };\n    }\n  } else {\n    return {\n      field: 'email_error',\n      error: false,\n      msg_error: ''\n    };\n  }\n}\n;\nexport function validatePhone(value) {\n  if (value === '') {\n    return {\n      field: 'phone_error',\n      error: true,\n      msg_error: 'Por favor, insira o número.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'phone_error',\n        error: true,\n        msg_error: 'Por favor, insira um número válido.'\n      };\n    } else {\n      return {\n        field: 'phone_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateCpf(value) {\n  if (value === '') {\n    return {\n      field: 'cpf_error',\n      error: true,\n      msg_error: 'Por favor, insira o cpf.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'cpf_error',\n        error: true,\n        msg_error: 'Por favor, insira um cpf válido.'\n      };\n    } else {\n      return {\n        field: 'cpf_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateIdenty(value) {\n  if (value === '') {\n    return {\n      field: 'identy_error',\n      error: true,\n      msg_error: 'Por favor, insira a identidade.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'identy_error',\n        error: true,\n        msg_error: 'Por favor, insira uma identidade válida.'\n      };\n    } else {\n      return {\n        field: 'identy_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateZipCode(value) {\n  if (value === '') {\n    return {\n      field: 'zip_code_error',\n      error: true,\n      msg_error: 'Por favor, insira o cep.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'zip_code_error',\n        error: true,\n        msg_error: 'Por favor, insira um cep válido.'\n      };\n    } else {\n      return {\n        field: 'zip_code_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateState(value) {\n  if (value === '') {\n    return {\n      field: 'state_error',\n      error: true,\n      msg_error: 'Por favor, insira o estado.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'state_error',\n        error: true,\n        msg_error: 'Por favor, insira um estado válido.'\n      };\n    } else {\n      return {\n        field: 'state_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateCity(value) {\n  if (value === '') {\n    return {\n      field: 'city_error',\n      error: true,\n      msg_error: 'Por favor, insira a cidade.'\n    };\n  } else {\n    if (value.includes('_')) {\n      return {\n        field: 'city_error',\n        error: true,\n        msg_error: 'Por favor, insira uma cidade válida.'\n      };\n    } else {\n      return {\n        field: 'city_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateAddress(value) {\n  let regex_validation_address = /^[\\pL\\pM\\p{Zs}.-]+$/;\n\n  if (value === '') {\n    return {\n      field: 'address_error',\n      error: true,\n      msg_error: 'Por favor, insira o endereço.'\n    };\n  } else {\n    if (regex_validation_address.test(value)) {\n      return {\n        field: 'address_error',\n        error: true,\n        msg_error: 'Por favor, insira um endereço válido.'\n      };\n    } else {\n      return {\n        field: 'address_error',\n        error: false,\n        msg_error: ''\n      };\n    }\n  }\n}\n;\nexport function validateAddressNumber(value) {\n  if (value === '') {\n    return {\n      field: 'address_number_error',\n      error: true,\n      msg_error: 'Por favor, insira o número do endereço.'\n    };\n  } else {\n    return {\n      field: 'address_number_error',\n      error: false,\n      msg_error: ''\n    };\n  }\n}\n;","map":{"version":3,"sources":["/home/eduardo/Documents/projetos/manager-patients/client/src/validations/patientForm.js"],"names":["CURRENT_DATE","validateName","value","field","error","msg_error","validateLastName","validateAgeOfBirth","includes","age_of_birth","Date","validateEmail","regex_validation_email","test","validatePhone","validateCpf","validateIdenty","validateZipCode","validateState","validateCity","validateAddress","regex_validation_address","validateAddressNumber"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oBAA7B;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE,IAA7B;AAAmCC,MAAAA,SAAS,EAAE;AAA9C,KAAP;AACD,GAFD,MAEM;AACJ,WAAO;AAACF,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE,KAA7B;AAAoCC,MAAAA,SAAS,EAAE;AAA/C,KAAP;AACD;AACJ;AAAA;AAGD,OAAO,SAASC,gBAAT,CAA0BJ,KAA1B,EAAiC;AACtC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,iBAAR;AAA2BC,MAAAA,KAAK,EAAE,IAAlC;AAAwCC,MAAAA,SAAS,EAAE;AAAnD,KAAP;AACD,GAFD,MAEM;AACJ,WAAO;AAACF,MAAAA,KAAK,EAAE,iBAAR;AAA2BC,MAAAA,KAAK,EAAE,KAAlC;AAAyCC,MAAAA,SAAS,EAAE;AAApD,KAAP;AACD;AACF;AAAA;AAGD,OAAO,SAASE,kBAAT,CAA4BL,KAA5B,EAAmC;AACxC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,oBAAR;AAA8BC,MAAAA,KAAK,EAAE,IAArC;AAA2CC,MAAAA,SAAS,EAAE;AAAtD,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,IAA9B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OAAP;AACD,KAFD,MAEM;AAEJ,UAAII,YAAY,GAAG,IAAIC,IAAJ,CAASR,KAAT,CAAnB;;AAEA,UAAGO,YAAY,GAAGT,YAAlB,EAA+B;AAC7B,eAAO;AAACG,UAAAA,KAAK,EAAE,aAAR;AAAuBC,UAAAA,KAAK,EAAE,IAA9B;AAAoCC,UAAAA,SAAS,EAAE;AAA/C,SAAP;AACD,OAFD,MAEM;AACJ,eAAO;AAACF,UAAAA,KAAK,EAAE,oBAAR;AAA8BC,UAAAA,KAAK,EAAE,KAArC;AAA4CC,UAAAA,SAAS,EAAC;AAAtD,SAAP;AACD;AACF;AACF;AACF;AAAA;AAGD,OAAO,SAASM,aAAT,CAAuBT,KAAvB,EAA8B;AACnC,MAAIU,sBAAsB,GAAG,uJAA7B;;AACA,MAAGV,KAAK,KAAK,EAAb,EAAgB;AACd,QAAGU,sBAAsB,CAACC,IAAvB,CAA4BX,KAA5B,CAAH,EAAsC;AACpC,aAAO;AAACC,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,KAA9B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,IAA9B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OAAP;AACD;AACF,GAND,MAMM;AACJ,WAAO;AAACF,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE,KAA9B;AAAqCC,MAAAA,SAAS,EAAE;AAAhD,KAAP;AACD;AACF;AAAA;AAGD,OAAO,SAASS,aAAT,CAAuBZ,KAAvB,EAA8B;AACnC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE,IAA9B;AAAoCC,MAAAA,SAAS,EAAE;AAA/C,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,IAA9B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,KAA9B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAP;AACD;AACF;AACF;AAAA;AAGD,OAAO,SAASU,WAAT,CAAqBb,KAArB,EAA4B;AACjC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE,IAA5B;AAAkCC,MAAAA,SAAS,EAAE;AAA7C,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,KAAK,EAAE,IAA5B;AAAkCC,QAAAA,SAAS,EAAE;AAA7C,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,KAAK,EAAE,KAA5B;AAAmCC,QAAAA,SAAS,EAAE;AAA9C,OAAP;AACD;AACF;AACF;AAAA;AAGD,OAAO,SAASW,cAAT,CAAwBd,KAAxB,EAA+B;AACpC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,cAAR;AAAwBC,MAAAA,KAAK,EAAE,IAA/B;AAAqCC,MAAAA,SAAS,EAAE;AAAhD,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,cAAR;AAAwBC,QAAAA,KAAK,EAAE,IAA/B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,cAAR;AAAwBC,QAAAA,KAAK,EAAE,KAA/B;AAAsCC,QAAAA,SAAS,EAAE;AAAjD,OAAP;AACD;AACF;AACF;AAAA;AAGD,OAAO,SAASY,eAAT,CAAyBf,KAAzB,EAAgC;AACnC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,gBAAR;AAA0BC,MAAAA,KAAK,EAAE,IAAjC;AAAuCC,MAAAA,SAAS,EAAE;AAAlD,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,gBAAR;AAA0BC,QAAAA,KAAK,EAAE,IAAjC;AAAuCC,QAAAA,SAAS,EAAE;AAAlD,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,gBAAR;AAA0BC,QAAAA,KAAK,EAAE,KAAjC;AAAwCC,QAAAA,SAAS,EAAE;AAAnD,OAAP;AACD;AACF;AACJ;AAAA;AAGD,OAAO,SAASa,aAAT,CAAuBhB,KAAvB,EAA8B;AACjC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE,IAA9B;AAAoCC,MAAAA,SAAS,EAAE;AAA/C,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,IAA9B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,KAAK,EAAE,KAA9B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAP;AACD;AACF;AACJ;AAAA;AAGD,OAAO,SAASc,YAAT,CAAsBjB,KAAtB,EAA6B;AAChC,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE,IAA7B;AAAmCC,MAAAA,SAAS,EAAE;AAA9C,KAAP;AACD,GAFD,MAEM;AACJ,QAAGH,KAAK,CAACM,QAAN,CAAe,GAAf,CAAH,EAAuB;AACrB,aAAO;AAACL,QAAAA,KAAK,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAE,IAA7B;AAAmCC,QAAAA,SAAS,EAAE;AAA9C,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAE,KAA7B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OAAP;AACD;AACF;AACJ;AAAA;AAGD,OAAO,SAASe,eAAT,CAAyBlB,KAAzB,EAAgC;AACrC,MAAImB,wBAAwB,GAAG,qBAA/B;;AACA,MAAGnB,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAE,IAAhC;AAAsCC,MAAAA,SAAS,EAAE;AAAjD,KAAP;AACD,GAFD,MAEM;AACJ,QAAGgB,wBAAwB,CAACR,IAAzB,CAA8BX,KAA9B,CAAH,EAAwC;AACtC,aAAO;AAACC,QAAAA,KAAK,EAAE,eAAR;AAAyBC,QAAAA,KAAK,EAAE,IAAhC;AAAsCC,QAAAA,SAAS,EAAE;AAAjD,OAAP;AACD,KAFD,MAEM;AACJ,aAAO;AAACF,QAAAA,KAAK,EAAE,eAAR;AAAyBC,QAAAA,KAAK,EAAE,KAAhC;AAAuCC,QAAAA,SAAS,EAAE;AAAlD,OAAP;AACD;AACF;AACF;AAAA;AAGD,OAAO,SAASiB,qBAAT,CAA+BpB,KAA/B,EAAsC;AAC3C,MAAGA,KAAK,KAAK,EAAb,EAAgB;AACd,WAAO;AAACC,MAAAA,KAAK,EAAE,sBAAR;AAAgCC,MAAAA,KAAK,EAAE,IAAvC;AAA6CC,MAAAA,SAAS,EAAE;AAAxD,KAAP;AACD,GAFD,MAEM;AACJ,WAAO;AAACF,MAAAA,KAAK,EAAE,sBAAR;AAAgCC,MAAAA,KAAK,EAAE,KAAvC;AAA8CC,MAAAA,SAAS,EAAE;AAAzD,KAAP;AACD;AACF;AAAA","sourcesContent":["import { CURRENT_DATE } from '../constants/index';\n\nexport function validateName(value) {\n    if(value === ''){\n      return {field: 'name_error', error: true, msg_error: 'Por favor, insira o nome'};\n    }else {\n      return {field: 'name_error', error: false, msg_error: ''};\n    }\n};\n\n\nexport function validateLastName(value) {\n  if(value === ''){\n    return {field: 'last_name_error', error: true, msg_error: 'Por favor, insira o sobrenome do paciente.'};\n  }else {\n    return {field: 'last_name_error', error: false, msg_error: ''};\n  }\n};\n\n\nexport function validateAgeOfBirth(value) {\n  if(value === ''){\n    return {field: 'age_of_birth_error', error: true, msg_error: 'Por favor, insira a data de nascimento.'};\n  }else {\n    if(value.includes('_')){\n      return {field: 'phone_error', error: true, msg_error: 'Por favor, insira uma data válida.'};\n    }else {\n\n      let age_of_birth = new Date(value);\n\n      if(age_of_birth > CURRENT_DATE){\n        return {field: 'phone_error', error: true, msg_error: 'Por favor, menor que a data atual.'};\n      }else {\n        return {field: 'age_of_birth_error', error: false, msg_error:''};\n      }\n    }\n  }\n};\n\n\nexport function validateEmail(value) {\n  let regex_validation_email = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if(value !== ''){\n    if(regex_validation_email.test(value)){\n      return {field: 'email_error', error: false, msg_error: ''};\n    }else {\n      return {field: 'email_error', error: true, msg_error: 'Por favor, insira um email válido.'};\n    }\n  }else {\n    return {field: 'email_error', error: false, msg_error: ''};\n  }\n};\n\n\nexport function validatePhone(value) {\n  if(value === ''){\n    return {field: 'phone_error', error: true, msg_error: 'Por favor, insira o número.'};\n  }else {\n    if(value.includes('_')){\n      return {field: 'phone_error', error: true, msg_error: 'Por favor, insira um número válido.'};\n    }else {\n      return {field: 'phone_error', error: false, msg_error: ''};\n    }\n  }\n};\n\n\nexport function validateCpf(value) {\n  if(value === ''){\n    return {field: 'cpf_error', error: true, msg_error: 'Por favor, insira o cpf.'};\n  }else {\n    if(value.includes('_')){\n      return {field: 'cpf_error', error: true, msg_error: 'Por favor, insira um cpf válido.'};\n    }else {\n      return {field: 'cpf_error', error: false, msg_error: ''};\n    }\n  }\n};\n\n\nexport function validateIdenty(value) {\n  if(value === ''){\n    return {field: 'identy_error', error: true, msg_error: 'Por favor, insira a identidade.'};\n  }else {\n    if(value.includes('_')){\n      return {field: 'identy_error', error: true, msg_error: 'Por favor, insira uma identidade válida.'};\n    }else {\n      return {field: 'identy_error', error: false, msg_error: ''};\n    }\n  }\n};\n\n\nexport function validateZipCode(value) {\n    if(value === ''){\n      return {field: 'zip_code_error', error: true, msg_error: 'Por favor, insira o cep.'};\n    }else {\n      if(value.includes('_')){\n        return {field: 'zip_code_error', error: true, msg_error: 'Por favor, insira um cep válido.'};\n      }else {\n        return {field: 'zip_code_error', error: false, msg_error: ''};\n      }\n    }\n};\n\n\nexport function validateState(value) {\n    if(value === ''){\n      return {field: 'state_error', error: true, msg_error: 'Por favor, insira o estado.'};\n    }else {\n      if(value.includes('_')){\n        return {field: 'state_error', error: true, msg_error: 'Por favor, insira um estado válido.'};\n      }else {\n        return {field: 'state_error', error: false, msg_error: ''};\n      }\n    }\n};\n\n\nexport function validateCity(value) {\n    if(value === ''){\n      return {field: 'city_error', error: true, msg_error: 'Por favor, insira a cidade.'};\n    }else {\n      if(value.includes('_')){\n        return {field: 'city_error', error: true, msg_error: 'Por favor, insira uma cidade válida.'};\n      }else {\n        return {field: 'city_error', error: false, msg_error: ''};\n      }\n    }\n};\n\n\nexport function validateAddress(value) {\n  let regex_validation_address = /^[\\pL\\pM\\p{Zs}.-]+$/;\n  if(value === ''){\n    return {field: 'address_error', error: true, msg_error: 'Por favor, insira o endereço.'};\n  }else {\n    if(regex_validation_address.test(value)){\n      return {field: 'address_error', error: true, msg_error: 'Por favor, insira um endereço válido.'};\n    }else {\n      return {field: 'address_error', error: false, msg_error: ''};\n    }\n  }\n};\n\n\nexport function validateAddressNumber(value) {\n  if(value === ''){\n    return {field: 'address_number_error', error: true, msg_error: 'Por favor, insira o número do endereço.'};\n  }else {\n    return {field: 'address_number_error', error: false, msg_error: ''};\n  }\n};"]},"metadata":{},"sourceType":"module"}